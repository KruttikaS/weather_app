{"version":3,"sources":["components/Demo.js","components/UserLocation.js","images/2850815.jpg","components/Spinner.js","App.js","index.js"],"names":["Demo","weatherData","Moment","globalFormat","className","dots","infinite","speed","focusOnSelect","slidesToShow","slidesToScroll","initialSlide","responsive","breakpoint","settings","hourly","map","x","i","time","Date","dt","toUTCString","slice","iconurl","weather","icon","Grid","Card","style","backgroundColor","CardContent","margin","src","temp","description","unix","UserLocation","str","current","currentDate","date","getDate","getMonth","getDay","Paper","elevation","container","spacing","item","xs","sm","charAt","toUpperCase","Spinner","props","message","defaultProps","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","fetch","then","res","json","result","fetchData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e0a448c.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport Slider from 'react-slick';\r\nimport {Card,Grid, CardContent} from \"@material-ui/core\";\r\nimport \"slick-carousel/slick/slick.css\"; \r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport Moment from 'react-moment';\r\nimport \"../SASS/UserLocation.scss\";\r\nconst Demo = ({weatherData}) => {\r\n    Moment.globalFormat = \"D MMM YYYY\";\r\n\r\n    const settings = {\r\n        dots:true,\r\n        infinite:false,\r\n        speed:500,\r\n        focusOnSelect:true,\r\n        slidesToShow:7,\r\n        slidesToScroll:7,\r\n        initialSlide:0,\r\n        responsive:[\r\n            {\r\n                breakpoint:1500,\r\n                settings:{\r\n                    slidesToShow:7,\r\n                    slidesToScroll:7,\r\n                    infinite:true,\r\n                    dots:true\r\n                }\r\n            },\r\n            {\r\n                breakpoint:1040,\r\n                settings:{\r\n                    slidesToShow:5,\r\n                    slidesToScroll:5,\r\n                    infinite:true,\r\n                    dots:true\r\n                }\r\n            },\r\n            {\r\n                breakpoint: 840,\r\n                settings: {\r\n                  slidesToShow: 4,\r\n                  slidesToScroll: 4,\r\n                  initialSlide: 1,\r\n                  dots:false\r\n                }\r\n              },\r\n              {\r\n                breakpoint: 600,\r\n                settings: {\r\n                  slidesToShow: 2,\r\n                  slidesToScroll: 2,\r\n                  initialSlide: 1,\r\n                  dots:false\r\n                }\r\n              },\r\n              {\r\n                breakpoint: 480,\r\n                settings: {\r\n                  slidesToShow: 2,\r\n                  slidesToScroll: 2,\r\n                  dots:false\r\n                }\r\n              }\r\n        ]\r\n    };\r\n\r\n    \r\n    return(\r\n        <div className=\"demo-div\">\r\n            <p className=\"hourly-heading\">Hourly Forecast</p>\r\n            <Slider {...settings}>\r\n               {weatherData.hourly.map((x,i) => {\r\n                   const dateObj = new Date((x.dt)*1000);\r\n                   const utcString = dateObj.toUTCString();\r\n                   const time=utcString.slice(-13, -7);\r\n                   \r\n\r\n                   const iconurl=`http://openweathermap.org/img/wn/${x.weather[0].icon}.png`;\r\n                   return(\r\n                       <Grid>\r\n                           <Card className=\"card-style\" style={{backgroundColor: 'rgb(255, 255, 255, 0.2)'}}>\r\n                               <CardContent>\r\n                                   <img style={{margin:'0 auto'}} src={iconurl} />\r\n                                   <p className=\"card-content\">{x.temp}{'\\u00b0'}C</p>\r\n                                   <p className=\"card-content\">{x.weather[0].description}</p>\r\n\r\n                                   <p className=\"card-content\"><Moment unix>{x.dt}</Moment></p>\r\n                                   <p className=\"card-content\">{time}</p>\r\n                               </CardContent>\r\n                           </Card>\r\n                       </Grid>\r\n                   )\r\n               })}\r\n          </Slider>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default Demo;\r\n\r\n\r\n\r\n\r\n","import React,{useState, useEffect} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Demo from './Demo';\r\nimport img from \"../images/2850815.jpg\";\r\nimport '../SASS/UserLocation.scss';\r\nconst UserLocation = ({weatherData}) => {\r\n    \r\n  // const paperStyle = {\r\n  //   padding: \"20px 30px\",\r\n  //   width: '94vw',\r\n  //   height: \"93vh\",\r\n  //   margin:'0 auto',\r\n  //   backgroundImage:`url(${img})`,\r\n  //   backgroundSize:'cover',\r\n  //   backgroundRepeat:'no-repeat',\r\n  //   backgroundPosition:'center'\r\n  // };\r\n  const iconurl=`http://openweathermap.org/img/wn/${weatherData.current.weather[0].icon}@4x.png`;\r\n  const months = [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'Nocvember',\r\n    'December',\r\n  ];\r\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n  const currentDate = new Date();\r\n  const date = `${currentDate.getDate()} ${\r\n    months[currentDate.getMonth()]}, ${days[currentDate.getDay()]} `;\r\n  \r\n    const Capitalize = (str) => {\r\n      return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n  \r\n    return(\r\n    <div>\r\n    <Grid>\r\n    <Paper elevation={0} className=\"paperstyle\">\r\n       <Grid container spacing={3}>\r\n        <Grid className=\"current-weather-des\" item xs={6} sm={3}>\r\n          <p>{weatherData.current.weather[0].description ? Capitalize(weatherData.current.weather[0].description) : null} \r\n          <img  src={iconurl}  />\r\n          </p>\r\n          \r\n         </Grid>\r\n        <Grid item xs={6}>\r\n           <p className=\"date\">{date}</p>\r\n        </Grid>  \r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n      {!weatherData ? (\r\n        <p>No DATA Found</p>\r\n      ): (\r\n        \r\n         \r\n           <Demo weatherData={weatherData} /> \r\n         \r\n        \r\n      )}\r\n      \r\n        <Grid item xs={6}>\r\n        <p className=\"current-temp\">{weatherData.current.temp ? weatherData.current.temp: null}{'\\u00b0'}C</p>\r\n        </Grid>  \r\n      </Grid>\r\n      </Paper>\r\n    </Grid>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserLocation;\r\n\r\n","export default __webpack_public_path__ + \"static/media/2850815.c04b9438.jpg\";","import React from 'react';\r\n\r\nconst Spinner = (props) => {\r\n   return( <div className=\"ui active dimmer\">\r\n    <div className=\"ui text loader\">{props.message}</div>\r\n  </div>\r\n   );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n    message:'Loading...'\r\n};\r\n\r\nexport default Spinner;","\nimport React,{useEffect, useState} from 'react';\nimport UserLocation from './components/UserLocation';\nimport Spinner from './components/Spinner';\nimport './images/2850815.jpg';\n\n\nconst App = () => {\n\n  const [lat, setLat] = useState([]);\n  const [long, setLong] = useState([]);\n  const [data, setData] = useState([]);\n  \n  \n\n  useEffect(() => {\n    const fetchData = async () => {\n      navigator.geolocation.getCurrentPosition((position) => {\n        console.log(position);\n        setLat(position.coords.latitude);\n        setLong(position.coords.longitude);\n      });\n      \n      await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&exclude=daily,minutely,alerts&units=metric&appid=37129062016901f2794952778d36c722`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        // console.log(result);\n        // console.log(data);\n      });\n    }\n    fetchData();\n\n  },[lat, long]);\n\n  // console.log(lat);\n  return(\n     <div>\n       {(((typeof data.hourly) && (typeof data.current)) !='undefined' )?(\n          <UserLocation weatherData={data} /> \n         \n       ):(\n         <Spinner />\n       )}\n     </div>\n  )\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n\n"],"sourceRoot":""}